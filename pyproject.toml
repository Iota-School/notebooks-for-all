# use the hatch build system for building and developing nbconvert_html5
# it helps us manage virtual environments and build tasks
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

# we build both sdist and wheel versions of the module
[tool.hatch.build.targets.sdist]
[tool.hatch.build.targets.wheel]

[project]
name = "nbconvert_html5"
description = "nbconvert templates using modern standards"
readme = "README.md"
url = "https://github.com/Iota-School/notebooks-for-all"
requires-python = ">=3.7"
license = "BSD-3-Clause"
keywords = []
authors = [{ name = "tonyfast", email = "tony.fast@gmail.com" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Natural Language :: English",
    "Programming Language :: Python",
    "License :: OSI Approved :: BSD License",
]
dependencies = [
    "nbconvert",
    "accessible-pygments",
    "IPython",
    "markdown-it-py[plugins,linkify]",
    "python-slugify",
    "html5lib"
]
dynamic = ["version"]

[project.optional-dependencies]
test = [
    "pytest",
    "nbval",
    "matplotlib",
    "numpy",
    "ipywidgets",
    "beautifulsoup4",
    "scipy",
]
audit = [
    "doit",
    "tomli",
    "requests",
    "requests_cache",
    "playwright",
    "pandas",
    "tabulate",
]
docs = ["mkdocs-material", "mkdocstrings[python]"]


# documentation
[tool.hatch.envs.docs]
features = ["docs"]

[tool.hatch.envs.docs.overrides]
env.CI.features = [{ if = ["1"], value = "audit" }]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build -v"
serve = "mkdocs serve -v"

[project.entry-points."nbconvert.exporters"]
html5_test = "nbconvert_html5.exporters:Html5Test"
# html5 = "nbconvert_html5.form_exporter:FormExporter"
a11y = "nbconvert_html5.form_exporter:A11yExporter"
# html_post = "nbconvert_html5.exporters:PostProcessExporter"

[tool.hatch.build.targets.wheel.shared-data]
"nbconvert_html5/templates" = "share/jupyter/nbconvert/templates"

# versioning is automatically synced using scm tools
[tool.setuptools_scm]
write_to = "nbconvert_html5/_version.py"

[tool.hatch.build.hooks.vcs]
version-file = "nbconvert_html5/_version.py"

[tool.hatch.version]
source = "vcs"

# testing setttings
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--nbval --current-env -pno:importnb --rootdir=tests --sanitize-with=sanitize.cfg"
testpaths = ["tests"]
norecursedirs = ["tests/notebooks", "*checkpoints"]

[tool.hatch.envs.test]
features = ["test"]

[tool.hatch.envs.test.scripts]
run = "pytest "


# formatting settings
[tool.isort]
profile = "black"

[tool.black]
line_length = 100

# doit tasks
[tool.hatch.envs.task.scripts]
list = "doit list"
export = "doit copy convert audit report"
run = "doit run"

[tool.hatch.envs.task]
features = ["audit"]
post-install-commands = ["- python -m playwright install chrome-beta"]

[tool.hatch.envs.task.overrides]
env.CI.post-install-commands = [
    "python -m playwright install --with-deps chrome-beta",
]

[tool.doit.commands.list]
status = true
subtasks = true

[tool.doit]
backend = "json"
verbosity = 2
process = 2

[tool.doit.tasks.copy]
notebooks = [
    "tests/notebooks/lorenz.ipynb",
    "tests/notebooks/lorenz-executed.ipynb",
    "user-tests/1-navigation/stsci_example_notebook.ipynb",
    "user-tests/2-content/Imaging_Sky_Background_Estimation.ipynb",
]
configurations = [
    "tests/configurations/default.py",
    "tests/configurations/a11y.py",
]

[tool.doit.tasks.convert]
notebooks_dir = "tests/exports/notebooks"
configs_dir = "tests/exports/configs"
target = "tests/exports/html"
