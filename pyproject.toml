# use the hatch build system for building and developing nbconvert_a11y
# it helps us manage virtual environments and build tasks
[build-system]
build-backend = "hatchling.build"
requires = ["hatch-vcs", "hatchling"]

[tool.hatch.build.targets.sdist]
[tool.hatch.build.targets.wheel]

[project]
name = "nbconvert-a11y"
description = "nbconvert templates using modern standards"
readme = "README.md"
url = "https://github.com/deathbeds/nbconvert-a11y"
requires-python = ">=3.8"
license = "BSD-3-Clause"
keywords = []
authors = [{ name = "tonyfast", email = "tony.fast@gmail.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: BSD License",
  "Natural Language :: English",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = [
  "accessible-pygments",
  "html5lib",
  "markdown-it-py[linkify,plugins]",
  "nbconvert",
  "python-slugify",
  "exceptiongroup; python_version < '3.12'",
]
dynamic = ["version"]

[project.optional-dependencies]
audit = ["playwright", "requests", "requests_cache"]
docs = ["mkdocs-material", "mkdocstrings[python]"]
task = ["doit", "pandas", "tabulate", "tomli"]
test = [
  "beautifulsoup4",
  "ipywidgets",
  "matplotlib",
  "numpy",
  "pytest",
  "pytest-html",
  "pytest-playwright",
  "pytest-sugar",
  "pytest-xdist",
  "scipy",
]

[tool.hatch.envs.docs]
features = ["docs"]

[tool.hatch.envs.docs.overrides]
env.CI.features = [{ if = ["1"], value = "audit" }]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build -v"
serve = "mkdocs serve -v"

[project.entry-points."nbconvert.exporters"]
a11y = "nbconvert_a11y.exporter:A11yExporter"
a11y-table = "nbconvert_a11y.exporter:A11yExporter"
a11y-landmark = "nbconvert_a11y.exporter:SectionExporter"
a11y-list = "nbconvert_a11y.exporter:ListExporter"

[project.entry-points.pytest11]
axe = "nbconvert_a11y.pytest_axe"

[tool.hatch.build.targets.wheel.shared-data]
"nbconvert_a11y/templates" = "share/jupyter/nbconvert/templates"

# versioning is automatically synced using scm tools
[tool.setuptools_scm]
write_to = "nbconvert_a11y/_version.py"


[tool.hatch.build.hooks.vcs]
version-file = "nbconvert_a11y/_version.py"

[tool.hatch.version]
source = "vcs"

# testing setttings
[tool.hatch.envs.test.scripts]
run = "pytest"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-vvv -pno:importnb"
testpaths = ["tests", "test_playwright.py"]
norecursedirs = ["tests/exports", "tests/notebooks", "*checkpoints"]


[tool.hatch.envs.test]
features = ["test", "audit"]
post-install-commands = ["python -m playwright install chrome"]

[tool.hatch.envs.test.overrides]
env.CI.post-install-commands = [
  "python -m playwright install --with-deps chrome",
]


[tool.hatch.envs.release]
# test a release on test-pypi
dependencies = ["nbconvert-a11y", "pytest"]

[tool.hatch.envs.release.scripts]
test = "pytest tests/test_smoke.py"

[tools.hatch.envs.release.overrides]
env.CI.dev-mode = false
env.CI.env-vars = [
  { key = "PIP_INDEX_URL", value = "https://test.pypi.org/simple/" },
  { key = "PIP_EXTRA_INDEX_URL", value = "https://pypi.org/simple/" },
  { key = "PIP_PRE", value = "1" },
]

# formatting settings
[tool.isort]
profile = "black"

[tool.black]
line_length = 100


[tool.hatch.envs.task]
features = ["task"]
description = "doit tasks"

[tool.hatch.envs.task.scripts]
list = "doit list"
convert = "doit convert"
run = "doit run"

[tool.hatch.envs.audit]
features = ["task", "audit"]
post-install-commands = ["- python -m playwright install chrome-beta"]

[tool.hatch.envs.audit.overrides]
env.CI.post-install-commands = [
  "python -m playwright install --with-deps chrome-beta",
]
[tool.hatch.envs.audit.scripts]
axe = "doit audit"

[tool.doit.commands.list]
status = true
subtasks = true

[tool.doit]
backend = "json"
verbosity = 2
process = 2

[tool.doit.tasks.copy]
notebooks = [
  "tests/notebooks/lorenz.ipynb",
  "tests/notebooks/lorenz-executed.ipynb",
]
configurations = [
  "tests/configurations/default.py",
  "tests/configurations/a11y.py",
]

[tool.doit.tasks.convert]
notebooks_dir = "tests/exports/notebooks"
configs_dir = "tests/exports/configs"
target = "tests/exports/html"

[tool.hatch.envs.format]
skip-install = true
dependencies = ["ruff", "pyproject-fmt"]

[tool.hatch.envs.format.scripts]
# cant reach steady state using pyproject.toml
# pyproject-fmt pyproject.toml
code = """
ruff --fix-only .
ruff format .
"""

[tool.ruff]
# formatting cause linting sucks
cache-dir = "build/.cache/ruff"
line-length = 100
extend-include = ["*.ipynb"]
exclude = [
  "tests/user-tests",
  "tests/configurations",
  "tests/notebooks",
  "user-tests",
]

[tool.ruff.lint]
isort.known-first-party = ["importnb"]
ignore = ["D203", "D213", "COM812", "ISC001"]
select = [
  "A",
  "ANN",
  "ARG",
  "B",
  "BLE",
  "C4",
  "C90",
  "COM",
  "D",
  "DJ",
  "DTZ",
  "E",
  "EM",
  "ERA",
  "EXE",
  "F",
  "FBT",
  "G",
  "I",
  "ICN",
  "INP",
  "ISC",
  "N",
  "NPY",
  "PD",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "T10",
  "T20",
  "TCH",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT",
]
